<?php

function light_misc_init() {
    drupal_add_js(drupal_get_path('module', 'light_misc') . '/light_misc.js');
}

function mitd_nid($uid, $op_nid) {

	$query = new EntityFieldQuery();
	$items_nids = array();
	$query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'proposals')
	  ->propertyCondition('status', 1) // published? yes
	  ->propertyCondition('uid', $uid)
	  ->fieldCondition('field_opportunity', 'nid', $op_nid);
	$result = $query->execute();

	if (isset($result['node'])) {
	  $items_nids = array_keys($result['node']);
	  //$items = entity_load('node', $items_nids);
	}

	return $items_nids;

}

function mitd_opportunity_count($uid) {
	$query = db_select('node', 'n')
	  ->fields('n')
      ->condition('type', 'opportunity')
     ->condition('uid', $uid)
      ->countQuery()
      ->execute()
       ->fetchAssoc();
     return $query['expression'];
}

function mitd_proposals_count($nid) {

  $result = array();
  if (module_exists('views'))
    $result = views_get_view_result('proposals', 'block_2', $nid);

  return count($result);
}

function light_misc_form_alter(&$form, &$form_state, $form_id) {
	global $user;

	switch ($form_id) {
		case "user_login":
			$options = array('attributes' => array('class' => 'on-right'));
			$form['resetlink'] = array(
				'#type' => 'item',
				'#markup' => l('Forgot Password?', 'user/password', $options)
				);
		break;
		case 'user_register_form':
    		$form['#validate'][] = 'light_misc_registersibmit';
		break;
    case 'user_profile_form':
        $form['#validate'][] = 'light_misc_registersibmit';
    break;
		case 'views_exposed_form':
	    	$view = $form_state['view'];
	        if ($view->name == 'bulletin_board' && $view->current_display == 'page') {
            $result = views_get_view_result('user_listing','block');
            $result_1 = views_get_view_result('user_listing','block_1');

	     	$options = array("" => "none");
	     	foreach($result as $key=> $val) {
	    	  $options[$val->users_name] = $val->field_field_first_name['0']['raw']['value'].' '.$val->field_field_last_name['0']['raw']['value'];
	    	}
	    	$form['uid_1']['#type'] = "select";
	    	$form['uid_1']['#options'] = $options;


			$options_1 = array("" => "none");
	     	foreach($result_1 as $key=> $val) {
	    	  $options_1[$val->users_name] = $val->field_field_first_name['0']['raw']['value'].' '.$val->field_field_last_name['0']['raw']['value'];
	    	}
	    	$form['uid']['#type'] = "select";
	    	$form['uid']['#options'] = $options_1;
	        }
		break;

	}
}

function light_misc_registersibmit(&$form, &$form_state) {

  $values = $form_state['values'];

  if( isset($values['field_mobile']) ){
    $mobno = $values['field_mobile']['und'][0]['value'];

    if (strpos($mobno, "-") <= 0){
      form_set_error('field_mobile', t('Invalid phone number. hyphen(-) needed after country code'));
    }

    $mobno_array = explode("-", $mobno);
    $mobno = trim(end($mobno_array));
    if (strlen($mobno) != "10") {
      form_set_error('field_mobile', t('Invalid phone number'));
    }
  }

}

/**
* Implements hook_menu().
*/
function light_misc_menu() {

	$items['proposal/%'] = array(
    'page callback' => 'light_misc_proposal_shortlisting',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  	);
  	$items['proposal/award/%'] = array(
    'page callback' => 'light_misc_award_proposal',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  	);

  return $items;
}

function light_misc_proposal_shortlisting() {

	$nid = arg(1);
	$node = node_load($nid);

	$node->field_short_list['und']['0']['value'] = 1;
	field_attach_update('node', $node);
	drupal_set_message(t("@title has been shortlisted",array('@title' => $node->title)));
	drupal_goto();
	return $node;
}

function light_misc_award_proposal() {

	$nid = arg(2);

	$node = node_load($nid);

	$op_nid = $node->field_opportunity['und']['0']['nid'];
	$opportunity_node = node_load($op_nid);
	$opportunity_node->field_award['und']['0']['value'] = $node->vid;
	$opportunity_node->field_contract_award_date['und']['0']['value'] = date('Y-m-d');
	field_attach_update('node', $opportunity_node);
    $result = views_get_view_result('proposals', 'block_5', $op_nid);
    foreach ($result as $key => $value) {
    	if($value->nid != $nid) {
    		$proposal_view = node_load($value->nid);
            $proposal_view->comment = 1;
    	}
    }
	$message = message_create('notify_user_when_opportunity_awarded', array('uid' => $node->uid));
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_opportunity_ref->set($opportunity_node);
	$wrapper->save();
	drupal_set_message(t("@title is awarded",array('@title' => $node->title)));

	drupal_goto();
}

function _check_awarded_opportunity($op_nid) {
	$node = node_load($op_nid);
	if( isset($node->field_award['und']) && $node->field_award['und']['0']['value'] > 0) {
		return true;
	} else {
		return false;
	}
}

/**
 * Implements hook_comment_insert().
 */
function light_misc_comment_insert($comment) {

  $comment_uid = $comment->uid;
  $node = node_load($comment->nid);
  $prop_uid = $node->uid;
  if(isset($node->field_opportunity)) {
  	$op_uid = $node->field_opportunity['und']['0']['node']->uid;

  	if($comment_uid == $prop_uid){
  		$account = $op_uid;

  	} else {
  		$account = $prop_uid;
  	}

    $message = message_create('comments_log', array('uid' => $account));
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_comment_ref->set($comment);
    $wrapper->field_proposal_ref->set($node);
    $wrapper->save();
  }
}

/**
 * Implements hook_node_insert().
 */
// function light_misc_node_insert($node) {
// 	print_r($node);exit;
//     $node = node_load($node->nid);
// 	$op = $node->field_opportunity['und']['0']['nid'];
// 	$op_node = node_load($op);
// 	$account = $op_node->uid;

//   	if($node->type == "proposals"){
//   	if(isset($account))
//       $message = message_create('notify_author_when_proposal_submit', array($account));
//       $wrapper = entity_metadata_wrapper('message', $message);
//       //$wrapper->field_proposal_ref->set($node);
//      // $wrapper->field_opportunity_ref->set($op_node);
//       $wrapper->save();
//   }
// }

function light_misc_opp_action($node){
global $user;
$link = "";
$proposal_submit = mitd_nid($user->uid, $node->nid);
	if(_check_awarded_opportunity($node->nid)) {
		$link = '<a href="#" class="btn btn-info btn-block">Awarded</a>';
	}
	else
	{
	if($node->uid != $user->uid) {
	  if(!empty($proposal_submit))
	    $link = '<a href="'.url("node/".$proposal_submit[0]) .'" class="btn btn-primary btn-block">View Proposal</a>';
	  else
	    $link = '<a href="'.url("node/add/proposals/".$node->nid) .'" class="btn btn-primary btn-block">Submit Proposal</a>';
	  }
	}
return $link;
}

function _og_members($gid){
	$output = array();
	$query = db_select("og_membership", "ogm");
	$query->condition("ogm.gid", $gid, "=");
	$query->fields("ogm", array("etid"));
	$result = $query->execute();
	foreach($result as $value) {
    $output[] = $value->etid;
	}
	return $output;
}

	

	