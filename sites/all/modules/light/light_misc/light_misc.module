<?php

function light_misc_init() {
	drupal_add_js(drupal_get_path('module', 'light_misc') . '/light_misc.js');
}

function mitd_nid($uid, $op_nid) {

	$query = new EntityFieldQuery();
	$items_nids = array();
	$query->entityCondition('entity_type', 'node')
	->entityCondition('bundle', 'proposals')
	  ->propertyCondition('status', 1) // published? yes
	  ->propertyCondition('uid', $uid)
	  ->fieldCondition('field_opportunity', 'nid', $op_nid);
	  $result = $query->execute();

	  if (isset($result['node'])) {
	  	$items_nids = array_keys($result['node']);
	  //$items = entity_load('node', $items_nids);
	  }

	  return $items_nids;

	}

	function mitd_opportunity_count($uid) {
		$query = db_select('node', 'n')
		->fields('n')
		->condition('type', 'opportunity')
		->condition('uid', $uid)
		->countQuery()
		->execute()
		->fetchAssoc();
		return $query['expression'];
	}

	function mitd_proposals_count($nid) {

		$result = array();
		if (module_exists('views'))
			$result = views_get_view_result('proposals', 'block_2', $nid);

		return count($result);
	}

	function light_misc_form_alter(&$form, &$form_state, $form_id) {
					//print_r($form_id);exit;
		//int_r($form_state);exit;
		global $user;
		switch ($form_id) {
			case "contact_site_form":
			case "simplenews_block_form_612":
				$form['actions']['submit']['#attributes'] = array('class' => array('btn', 'btn-primary'));

				$form['submit']['#attributes'] = array('class' => array('btn', 'btn-primary'));
				
			case "user_login_block";
				$form['#submit'][] = 'light_misc_login_form_submit';
			break;

			case "user_login":		
			$options = array('attributes' => array('class' => 'on-right'));
			$form['link'] = array('#markup' => l(t('Forgot password?'),'user/password'),'#class' => $options,'#type' => 'item');
			break;

			case 'opportunity_node_form':
			$form['#validate'] = array('light_misc_opportunity_validation');
			break;
			case 'user_register_form':
			$form['actions']['submit']['#attributes'] = array('class' => array('btn', 'btn-primary'));
			$form['terms_of_use'] = array(
				'#weight' => 50
				);
			$form['#validate'][] = 'light_misc_registersibmit';
			break;
			case 'user_profile_form': 			            		
				$form['#validate'][] = 'light_misc_profile_submit';
				break;
			case 'project_node_form':
				unset($form['actions']['preview']);
				break;
			case 'feedback_collect_node_form':
			$form['from'] = array(
			  '#type' => 'item',
			  '#weight' => -10,
			  '#markup' => '<h2>Feedback</h2>',
			);
				$form['#submit'][] = 'light_misc_feedbackform_submit';
				break;	
			case 'views_exposed_form':
			//print_r($form);exit;
			$view = $form_state['view'];
			if ($view->name == 'bulletin_board' && $view->current_display == 'page') {
				$result = views_get_view_result('user_listing','block');
				$result_1 = views_get_view_result('user_listing','block_1');

				$options = array("" => "All");

				foreach($result as $key=> $val) {
					$full_name = array();
					$full_name[] = isset($val->field_field_first_name['0']) ? $val->field_field_first_name['0']['raw']['value'] : "";
					$full_name[] = isset($val->field_field_last_name['0']) ? $val->field_field_last_name['0']['raw']['value'] : "";
					$options[$val->users_name] = implode(" ",$full_name);
				}
				$form['uid_1']['#type'] = "select";
				$form['uid_1']['#description'] = "Select client name from the list";
				$form['uid_1']['#options'] = $options;


				$options_1 = array("" => "All");
				foreach($result_1 as $key=> $val) {
					$options_1[$val->users_name] = $val->field_field_first_name['0']['raw']['value'].' '.$val->field_field_last_name['0']['raw']['value'];
				}
				$form['uid']['#type'] = "select";
				$form['uid']['#description'] = "Select partner name from the list";
				$form['uid']['#options'] = $options_1;
			}
			if($form['#id'] == 'views-exposed-form-tenders-list-page') {
				$form['field_start_date_value']['value']['#date_format'] = 'm/d/Y';
				$form['field_closing_date_value']['value']['#date_format'] = 'm/d/Y';
			}

			break;

		}
	}
    
	function light_misc_mail($key, &$message, $params){
	  $headers = array(
	    'MIME-Version' => '1.0',
	    'Content-Type' => 'text/html; charset=UTF-8;',
	    'Content-Transfer-Encoding' => '8Bit',
	    'X-Mailer' => 'Drupal'
	    );

	  foreach ($headers as $k => $value) {
	    $message['headers'][$k] = $value;
	  }
	  switch ($key) {
	  	case 'domainnotification':
	      $message['subject'] = $params['subject'];
	      $message['body'] = $params['body'];
	    break;
	  }

	}

    function light_misc_login_form_submit($form, &$form_state) {
        $_GET['destination'] = 'user';
    }

    function light_misc_feedbackform_submit($form, &$form_state) {
    	$_GET['destination'] = 'http://makeitdeals.com';
    }

    function light_misc_profile_submit($form, &$form_state) {
      
    }

	function light_misc_opportunity_validation(&$form, &$form_state){

		$values = $form_state['values'];
		$errors = form_get_errors();
        if(is_array($errors) && !empty($errors)) {
			foreach ($errors as $key => $value) {
				if (0 === strpos($value, 'There are errors in Question')) {
					drupal_get_messages('error');
					$value = str_replace('Date value #1','',$value);
					$value = str_replace('greater than the Start date','greater than or equalto the Start date',$value);

					form_set_error('field_question_answer_date',$value);
				}
			}
		}
		if (is_numeric($values['title'])) 
   		{
     		form_set_error('name', t('Opportunity title should not be numeric only'));
   		}
   		if (is_numeric($values['field_general_requirements']['und'][0]['value'])) 
   		{
     		form_set_error('name', t('General Requirements field should not be numeric only'));
   		}

		$title = preg_replace('/[^A-Za-z0-9-]/',"",$values['title']);
		if( strlen($title) == 0) {
			form_set_error('name', t('Opportunity title field should not be special character only'));
		}

		$gene_req = preg_replace('/[^A-Za-z0-9-]/',"",$values['field_general_requirements']['und'][0]['value']);
		if( strlen($gene_req) == 0) {
			form_set_error('name', t('General Requirements field should not be special character only'));
		}
	}

	function light_misc_registersibmit(&$form, &$form_state) {

		$values = $form_state['values'];


        if(preg_match('/[^-]+$/', $values['field_mobile']['und'][0]['value'], $match)){

        }
		    
		if($match[0] == '' || !is_numeric($match[0])){
		  form_set_error('field_mobile', t('Enter a valid mobile number.'));
        }

		$domain = explode('@', $values['mail']);
		$exist = db_select('users', 'us')
        		->fields('us')
        		->condition('mail', '%' . db_like($domain[1]) . '%', 'LIKE')
        		->execute()
        		->rowCount();
		if ($exist) {
		    $subject = 'Email id with same domain name';
		    $module = 'light_misc';
		    $key = 'domainnotification';
		    $to = "admin@makeitdeals.com";
		    $message = '';
		    $message .= 'A new user has been registered with existing domain name '.$domain[1].'<br>' ;
		    $from = variable_get('site_mail', 'admin@makeitdeals.com');
		    $params = array(
		      'body' => $message,
		      'subject' => $subject
		      );
		    $language = language_default();
		    $send = TRUE;
		    return drupal_mail($module, $key, $to, $language, $params, $from, $send);
		}

		if( isset($values['field_mobile']) ){
			$mobno = $values['field_mobile']['und'][0]['value'];
			if (strpos($mobno, "-") <= 0){
				form_set_error('field_mobile', t('Invalid phone number. hyphen(-) needed after country code'));
			}

			$mobno_array = explode("-", $mobno);
			$mobno = trim(end($mobno_array));
			if (strlen($mobno) != "10") {
				form_set_error('field_mobile', t('Invalid phone number'));
			}

			if (!preg_match('/^[A-Za-z]+$/', $values['field_first_name']['und'][0]['value'])) 
   			{
     			form_set_error('name', t('Please enter alphabets only for First Name.'));
   			}
   			if (!preg_match('/^[A-Za-z]+$/', $values['field_last_name']['und'][0]['value'])) 
   			{
     			form_set_error('name', t('Please enter alphabets only for Last Name.'));
   			}

   			if($form['form_id']['#value'] == 'user_register_form') { 
	   			if ($values['locations'][0]['postal_code'] != '' && !is_numeric($values['locations'][0]['postal_code'])) {
	      			form_set_error('title', t('Postal code must be numeric only'));
	    		}
	    		if($values['locations'][0]['province'] == '') {
	    			form_set_error('title', t('State/Province should be selected'));
	    		}
    	    }
    	    if($form['form_id']['#value'] == 'user_profile_form') {
    	    	$form_state['redirect'] = 'user';
    	    }
		}

	}


function light_misc_permission() {
  return array(
    'admin management' => array(
      'title' => t('Admin Management'),
      'description' => t('Perform administration tasks for my module.'),
    ),
  );
}

/**
* Implements hook_menu().
*/
function light_misc_menu() {

	$items['proposal/%'] = array(
		'page callback' => 'light_misc_proposal_shortlisting',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
		);
	$items['unshortlist/%'] = array(
		'page callback' => 'light_misc_proposal_unshortlist',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
		);
	$items['proposal/award/%'] = array(
		'page callback' => 'light_misc_award_proposal',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
		);
	$items['madmin/config/subscription'] = array(
		'title' => 'Subscription Types',
		'description' => 'Subscription Types',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_subscription_settings_form'),
		'access arguments' => array('admin management'),
		'type' => MENU_NORMAL_ITEM,
		);
	$items['testing'] = array(
		'page callback' => 'light_misc_subscription_cron',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
		);

	$items['payment'] = array(
		'page callback' => 'light_misc_successful_payment',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
		);
	$items['user/%/verify'] = array(
		'title' => 'Please Pay',
		'description' => 'Pay the amount to become an mitd verified partner',
		'page callback' => 'drupal_get_form', 
        'page arguments' => array('mitd_payment_form'), 
		'access callback' => TRUE,
		);
    
    $items['verified/success/%'] = array(
		'page callback' => 'light_misc_verified_success',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
		);

     $items['madmin/manage/discounts'] = array(
		'title' => 'Apply Discounts',
		'description' => 'Apply discounts to a certain period of time.',
		'page callback' => 'drupal_get_form', 
        'page arguments' => array('mitd_discount_form'), 
		'access callback' => TRUE,
		);

	return $items;
}

function mitd_discount_form() {

	$memberships = array();
	$memberships = views_get_view_result('memberships', 'default');

	$result = views_get_view_result('manage_partners_list_by_analyst','block');  
	$ids = array();
	$mem_options = array();

	$default_value = array();
$default_value[] = '';
	
	$form['select_all'] = array(
      '#type' =>'checkbox',
      '#default_value' =>FALSE, // for default checked and false is not checked
      '#attributes' => array('class' => array('my-checkbox')),
    );

	$vals = array();
 	
 		$form['fieldset_partners'] = array(
  			'#type' => 'fieldset',
  			'#title' => t('Partners'),
  			'#collapsible' => FALSE,
  			'#collapsed' => FALSE,  
		);
 	
	foreach ($result as $value) {
		
        $name = $value->_field_data['uid']['entity']->field_first_name['und']['0']['value'].' '.$value->_field_data['uid']['entity']->field_last_name['und']['0']['value'];

 		$id = $value->_field_data['uid']['entity']->uid;
 		$ids[] = $id;
 		$vals[$id] = $name;
	}

	$form['fieldset_partners']['field_partners'] = array(
  		'#type' => 'checkboxes',
  		'#title' => t('Apply Discounts'),
  		'#options' => $vals, 
   		//'#default_value' => $ids,
		);

	$form['uid_hidden'] = array('#type' => 'hidden', '#value' => $ids);

	foreach ($memberships as $membership) {
		$mem_options[$membership->machine_name] = $membership->paypal_roles_memberships_name;
	
	}
	  
	$form['memberships'] = array(     
	        '#type' => 'select',
	        //'#default_value' => $selectlist_default_value,        
	        '#options' => $mem_options,
	); 

	$form['submit_button'] = array(
    	'#type' => 'submit',
    	'#value' => t('Submit'),
  	);

	return $form;

}

function mitd_discount_form_validate($form, &$form_state) {

}

function mitd_discount_form_submit($form, &$form_state) {


	$partner_ids = array();
	
	$selected_membership = $form_state['input']['memberships'];

	$partner_ids = $form_state['values']['field_partners'];

	foreach ($partner_ids as $id) {

	$payments = paypal_roles_get_payments_by_uid($id);


	foreach ($payments as $key => $value) {

     $role_pay =light_misc_manage_roles_by_payments($value, $id,$selected_membership);

	}

}


 }

function light_misc_manage_roles_by_payments($payments = array(), $uid = 0,$selected_membership) {

	$grace_period = variable_get('paypal_roles_payment_grace_period', 86400);
    $payment_created = $payments->created + (int) $grace_period;
	$payment_date = date("Y-m-d H:i:s", $payment_created);
	$roles = array();
  	$active_roles = array();
	$membership = light_misc_membership_load($selected_membership);

	 if ((int) $membership['0']->length === 0 && (bool) $payment->cancelled === FALSE) {
      if (!in_array($membership['0']->role, $active_roles)) {
        $active_roles[] = $membership['0']->role;

      }
    }

		$type = paypal_roles_convert_length($membership['0']->length_type, $membership['0']->length);

	if ($type) {
	    $expiration = strtotime($payment_date . " +" . $membership['0']->length . " " . $type);
	    $data = views_get_view_result('payments','default');

	    if ($expiration >= time() && (bool) $payments->cancelled === FALSE) {
          if (!in_array($membership['0']->role, $active_roles)) {
            $active_roles[] = $membership['0']->role;

          }
        }

  		$inactives = array_diff($roles, $active_roles);
  		paypal_roles_remove_roles_from_account($inactives, $uid);	
  		// Add active roles.
  		paypal_roles_add_roles_to_account($active_roles, $uid);
  
  		$usr_data = light_misc_user_payments($uid);

   		$record = array (
     		'txn_id'=> $usr_data[0]->txn_id,
     		'uid'=> $usr_data[0]->uid,
     		'item_id'=> $membership[0]->machine_name,
     		'item_name'=> $membership[0]->name,
     		'created'=> $usr_data[0]->created,
     		'amount'=> $usr_data[0]->amount,
     		'currency'=> $usr_data[0]->currency,
     		'post'=> $usr_data[0]->post,
     		'cancelled'=> $usr_data[0]->cancelled,
      	);
		drupal_write_record("paypal_roles_payments",$record,'txn_id');			
	}
	drupal_get_messages('status');
    drupal_set_message("Your changes have been saved..");
}


function light_misc_membership_load($item_id) {

return  db_query('SELECT * FROM {paypal_roles_memberships}  WHERE machine_name = :machine_name', array(':machine_name' => $item_id))
 ->fetchAll();

}

function light_misc_user_payments($uid) {

return  db_query('SELECT * FROM {paypal_roles_payments}  WHERE uid = :uid', array(':uid' => $uid))
 ->fetchAll();

}


function mitd_payment_form() {

	$form['description'] = array(
    	'#type' => 'item',
    	'#title' => 'Mitd User Verification',
    	'#markup' => '<br>You can become an mitd verified partner by paying  <b>$49</b> on submitting the below button.',
    );

	$form['submit'] = array(
    	'#type' => 'submit',
    	'#value' => 'Submit',
    );
  return $form;
}

function mitd_payment_form_validate($form, &$form_state) {

}

function mitd_payment_form_submit($form, &$form_state) {

	global $base_url, $base_path, $user;

	$usr = user_load($user->uid);
	$params = array();
 	$params['cmd'] = '_xclick';

	$params['currency_code'] = "USD";
	$params['amount'] = 49;
	 if (user_is_logged_in()) {
    $params['custom'] = $user->mail;
    $params['uid'] = $user->uid;
    }


  $return = $base_url .'/verified/success/'.$params['uid'];
  $return_cancel = $base_url . $base_path;

  if (variable_get('paypal_roles_sandbox', 1) == "1") {
    $url = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    $params['business'] = variable_get('paypal_roles_s_email', '');

    $params['return'] = $return;    
    $params['cancel_return'] = variable_get('paypal_roles_s_return_cancel', $return_cancel);

  }
  else {
    $url = 'https://www.paypal.com/cgi-bin/webscr';
    $params['business'] = variable_get('paypal_roles_l_email', '');

    $params['return'] = variable_get('paypal_roles_l_return', $return);
    $params['cancel_return'] = variable_get('paypal_roles_l_return_cancel', $return_cancel);
 
  }
  // Default IPN path.
  $params['notify_url'] = url('paypal-roles/ipn-listener', array('absolute' => TRUE));

  // The locale of the login or sign-up page.
  if (isset($ml->language) && $ml->language != 'N/A') {
    $params['lc'] = $ml->language;
  }

  $query = drupal_http_build_query($params);
  drupal_goto($url . '?' . $query);
  drupal_exit();
}

function light_misc_verified_success() {
    $uid = arg(2);
	$usr = user_load($uid);
	$usr->field_verified_value['und'][0]['value']  = 1;
	user_save($usr);
	drupal_goto('user/'.$uid);

}

function light_misc_proposal_shortlisting() {

	$nid = arg(1);
	$node = node_load($nid);
	
	$node->field_short_list['und']['0']['value'] = 1;
	field_attach_update('node', $node);

	$message = message_create('notify_user_when_proposal_shortlisted', array('uid' => $node->uid));
	$wrapper = entity_metadata_wrapper('message', $message);
	$wrapper->field_proposal_ref->set($node);
	$wrapper->save();
	drupal_set_message(t("@title has been shortlisted",array('@title' => $node->title)));
	drupal_goto();
	return $node;
}

function light_misc_proposal_unshortlist() {

	$nid = arg(1);

	$node = node_load($nid);
	$node->field_short_list['und']['0']['value'] = 0;
	field_attach_update('node', $node);
	drupal_set_message(t("@title has been removed from shorlist",array('@title' => $node->title)));
	drupal_goto();
	return $node;

}

function light_misc_award_proposal() {

	$nid = arg(2);

	$node = node_load($nid);	
	$op_nid = $node->field_opportunity['und']['0']['nid'];
	$opportunity_node = node_load($op_nid);
	$opportunity_node->field_award['und']['0']['value'] = $node->nid;
	$opportunity_node->field_contract_award_date['und']['0']['value'] = date('Y-m-d');
	field_attach_update('node', $opportunity_node);
	$result = views_get_view_result('proposals', 'block_5', $op_nid);
	foreach ($result as $key => $value) {
		if($value->nid != $nid) {
			$proposal_view = node_load($value->nid);
			$proposal_view->comment = 1;
		}
	}
	$message = message_create('notify_user_when_opportunity_awarded', array('uid' => $node->uid));
	$wrapper = entity_metadata_wrapper('message', $message);
	$wrapper->field_opportunity_ref->set($opportunity_node);
	$wrapper->save();
	drupal_set_message(t("@title is awarded",array('@title' => $node->title)));

	drupal_goto();
}

function _check_awarded_opportunity($op_nid) {
	$node = node_load($op_nid);
	if( isset($node->field_award['und']) && $node->field_award['und']['0']['value'] > 0) {
		return true;
	} else {
		return false;
	}
}

function light_misc_user_verification() {
	print_r(arg(1));exit;
	
}

/**
 * Implements hook_comment_insert().
 */
function light_misc_comment_insert($comment) {

	$comment_uid = $comment->uid;
	$node = node_load($comment->nid);
	$prop_uid = $node->uid;
	if(isset($node->field_opportunity)) {
		$op_uid = $node->field_opportunity['und']['0']['node']->uid;

		if($comment_uid == $prop_uid){
			$account = $op_uid;

		} else {
			$account = $prop_uid;
		}

		$message = message_create('comments_log', array('uid' => $account));
		$wrapper = entity_metadata_wrapper('message', $message);
		$wrapper->field_comment_ref->set($comment);
		$wrapper->field_proposal_ref->set($node);
		$wrapper->save();
	}
}

/**
 * Implements hook_node_insert().
 */
// function light_misc_node_insert($node) {
// 	print_r($node);exit;
//     $node = node_load($node->nid);
// 	$op = $node->field_opportunity['und']['0']['nid'];
// 	$op_node = node_load($op);
// 	$account = $op_node->uid;

//   	if($node->type == "proposals"){
//   	if(isset($account))
//       $message = message_create('notify_author_when_proposal_submit', array($account));
//       $wrapper = entity_metadata_wrapper('message', $message);
//       //$wrapper->field_proposal_ref->set($node);
//      // $wrapper->field_opportunity_ref->set($op_node);
//       $wrapper->save();
//   }
// }

function light_misc_opp_action($node){
	global $user;
	$link = "";
	$proposal_submit = mitd_nid($user->uid, $node->nid);
	if(_check_awarded_opportunity($node->nid)) {
		$link = '<a href="#" class="btn btn-info btn-block">Awarded</a>';
	}
	else
	{
		if($node->uid != $user->uid) {
			if(!in_array("admin", $user->roles)) {
				if(!empty($proposal_submit))
					$link = '<a href="'.url("node/".$proposal_submit[0]) .'" class="btn btn-primary btn-block">View Proposal</a>';
				else
					if(_check_subscription_count($user->uid)) {
						$link = '<a href="'.url("node/add/proposals/".$node->nid) .'" class="btn btn-primary btn-block">Submit Proposal</a>';
					} else {
						$link = '<p>No Bid Left </p>';
					}
				}
			}
		}
		return $link;
	}

	function _og_members($gid){
		$output = array();
		$query = db_select("og_membership", "ogm");
		$query->condition("ogm.gid", $gid, "=");
		$query->condition("ogm.state", 1, "=");
		$query->fields("ogm", array("etid"));
		$result = $query->execute();
		foreach($result as $value) {
			$output[] = $value->etid;
		}
		return $output;
	}

	function _check_subscription($uid,$role_name) {
		$user_data = user_load($uid);
		return in_array($role_name, $user_data->roles);
	}

	function _display_subscription($uid) {
		$output = "";
		if (_check_subscription($uid,"0free") ){
			$output = "Free";
		}
		if (_check_subscription($uid,"1basic") ){
			$output = "Basic";
		}
		if (_check_subscription($uid,"2standard") ){
			$output = "Standard";
		}
		if (_check_subscription($uid,"3premium") ){
			$output = "Premium";
		}
		return $output;
	}
	function _generate_subscription_class($uid) {
		$output = "";
		$count = _subscription_remaining_bid($uid);
		if($count != 0) {			
			$bids = " bid-remaining";
		}
		if (_check_subscription($uid,"0free") ){
			$output = "user-free";
		}
		if (_check_subscription($uid,"1basic") ){
			$output = "user-basic";
		}
		if (_check_subscription($uid,"2standard") ){
			$output = "user-standard";
		}
		if (_check_subscription($uid,"3premium") ){
			$output = "user-premium";
		}
        if(isset($bids)) { 
	        $output = $output.$bids;
    	}

		return $output;
	}


	function _subscription_settings_form($form, &$form_state) {

		$form = array();
		$form['subscriptionsettings'] = array(
			'#type' => 'fieldset',
			'#title' => 'Subscription Settings'
			);
		$form['subscriptionsettings']['bid_free'] = array(
			'#type' => 'textfield',
			'#title' => t('Free'),
			'#number_type' => 'int',
			'#default_value' => variable_get('bid_free', '0'),
			);
		$form['subscriptionsettings']['bid_basic'] = array(
			'#type' => 'textfield',
			'#title' => t('Basic'),
			'#number_type' => 'int',
			'#default_value' => variable_get('bid_basic', '5'),
			);
		$form['subscriptionsettings']['bid_standard'] = array(
			'#type' => 'textfield',
			'#title' => t('Standard'),
			'#number_type' => 'int',
			'#default_value' => variable_get('bid_standard', '10'),
			);
		$form['subscriptionsettings']['bid_premium'] = array(
			'#type' => 'textfield',
			'#title' => t('Unlimited'),
			'#number_type' => 'int',
			'#default_value' => variable_get('bid_premium', '-1'),
			);
		return system_settings_form($form);

	}

	function _check_subscription_count($uid) {

		$link = TRUE;
		$user_data = user_load($uid);
		if(isset($user_data->roles['19'])) {
			$link = TRUE;
		}		
		
		elseif(isset($user_data->roles['17'])) {
			if($user_data->field_bids_month['und']['0']['value'] >= variable_get('bid_basic', '5')) {
				$link = FALSE;
			}
		}
		elseif(isset($user_data->roles['18'])) { 			
			if($user_data->field_bids_month['und']['0']['value'] >= variable_get('bid_standard', '10')) {				
				$link = FALSE;
			}
		} else {
			$link = FALSE;
		}		
		return $link;
	}

	function light_misc_subscription_cron() {
        //print_r(date('d'));exit;
		if(date('d') == 1)
			db_update('field_data_field_bids_month')
		->fields(array(
			'field_bids_month_value' => 0,
			))
		->execute();
	}

	function _check_awarded_proposal($nid) {
		
		$node = node_load($nid);				
		$prop_author = user_load($node->uid);		
		$name = $prop_author->field_first_name['und']['0']['value'].' '.$prop_author->field_last_name['und']['0']['value'];

		return $name;
		
	}

	function _subscription_count_remaining ($uid) {

		$fixed_count = 0;

		$user_details = user_load($uid);
		if(isset($user_details->roles['16'])) {
			$fixed_count = variable_get('bid_free', '0');
		}				
		if(isset($user_details->roles['17'])) {
			$fixed_count = variable_get('bid_basic', '5');
		}
		if(isset($user_details->roles['18'])) {
			$fixed_count = variable_get('bid_standard', '10');
		}

		$count_remain = $fixed_count;
		if ( isset($user_details->field_bids_month['und']) ) {
    		$count_remain = $fixed_count-$user_details->field_bids_month['und']['0']['value'];     
    	}  
    	$count = $count_remain.' Bids are remaining out of '.$fixed_count;        
    	$result = isset($user_details->roles['19']) ? "Unlimited" : $count;
    	
        return $result;

	}

	function light_misc_successful_payment () {
    		if (isset($_POST['txn_id'])) {
				$txn = paypal_roles_payments_load($_POST['txn_id']);				
				$usr_data = user_load($txn->uid);		
				$usr_data->field_bids_month['und']['0']['value'] = 0;
  				user_save($usr_data);
				//watchdog('light_misc', '<pre>'. print_r($txn, TRUE) .'</pre>', array(), WATCHDOG_INFO, NULL);
				drupal_goto("http://makeitdeals.com/subscriptions", array('external' => TRUE));
				print_r($usr_data);
    		}
    		
		return "<h1>Payment Success</h1><br><p>Your transaction has been successfully completed.<br>An email notification has been sent to your mail account by the administrator.</p>";
	}
    
    function _subscription_remaining_bid ($uid) {

		$fixed_count = 0;

		$user_details = user_load($uid);
		if(isset($user_details->roles['16'])) {
			$fixed_count = variable_get('bid_free', '0');
		}				
		if(isset($user_details->roles['17'])) {
			$fixed_count = variable_get('bid_basic', '5');
		}
		if(isset($user_details->roles['18'])) {
			$fixed_count = variable_get('bid_standard', '10');
		}

		$count_remain = $fixed_count;
		if ( isset($user_details->field_bids_month['und']) ) {
    		$count_remain = $fixed_count-$user_details->field_bids_month['und']['0']['value'];     
    	}  
    	$count = $count_remain;        
    	$result = isset($user_details->roles['19']) ? -1 : $count;
    	
        return $result;

	}
    
    function light_misc_form_user_register_form_alter(&$form, &$form_state) {
   
    	$form['#submit'][] = 'light_misc_user_register_form_submit';
    }

    function light_misc_user_register_form_submit($form, &$form_state) {
 
    	global $user;
    
    	if ( $user->uid > 1 && $user->uid != $form_state['user']->uid){
    	//$form_state['user']->roles = '6';
    		user_multiple_role_edit(array($form_state['user']->uid), 'add_role',   6);
    		user_multiple_role_edit(array($form_state['user']->uid), 'add_role',   16);
    	}

       
    }