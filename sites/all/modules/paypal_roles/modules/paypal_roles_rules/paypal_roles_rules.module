<?php
/**
 * @file
 * Hooks and callback functions for rules.module integration.
 */

/**
 * Implements hook_menu().
 */
function paypal_roles_rules_menu() {
  $items['admin/paypal-roles/tax'] = array(
    'title' => 'Tax Rules',
    'description' => 'Allows the user to configure custom taxation rules',
    'access callback' => 'paypal_roles_rules_menu_access',
    'page callback' => 'drupal_goto',
    'page arguments' => array(
      'admin/config/workflow/rules',
      array(
        'query' => array(
          'event' => 0,
          'tag' => 'Paypal Roles Tax',
        ),
      ),
    ),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 5,
  );

  return $items;
}

/**
 * Access callback. If the user has access to administer roles or paypal roles,
 * return TRUE.
 */
function paypal_roles_rules_menu_access() {
  return (user_access('administer paypal roles') || user_access('administer rules'));
}

/**
 * Implements hook_rules_event_info().
 */
function paypal_roles_rules_rules_event_info() {
  return array(
    'paypal_roles_payment_insert' => array(
      'label' => t('After saving new payment'),
      'module' => 'paypal_roles_rules',
      'group' => 'PayPal Roles',
      'variables' => array(
        'payment' => array(
          'type' => 'paypal_roles_payments',
          'label' => t('The processed and saved payment.'),
        ),
        'user' => array(
          'type' => 'user',
          'label' => t('The user, who is associated with the payment.'),
        ),
      ),
    ),
    'paypal_roles_custom_payments_insert' => array(
      'label' => t('After saving new custom payment'),
      'module' => 'paypal_roles_rules',
      'group' => 'PayPal Roles',
      'variables' => array(
        'payment' => array(
          'type' => 'paypal_roles_custom_payments',
          'label' => t('The processed and saved custom payment.'),
        ),
        'user' => array(
          'type' => 'user',
          'label' => t('The user, who is associated with the payment.'),
        ),
      ),
    ),
    'paypal_roles_memberships_alter' => array(
      'label' => t('Before loading the membership product'),
      'module' => 'paypal_roles_rules',
      'group' => 'PayPal Roles',
      'variables' => array(
        'membership' => array(
          'type' => 'paypal_roles_memberships',
          'label' => t('The membership product'),
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_rules_action_info().
 */
function paypal_roles_rules_rules_action_info() {
  return array(
    'paypal_roles_rules_action_calculate_tax' => array(
      'label' => t('Calculate price with tax on base membership price'),
      'group' => t('Paypal Roles'),
      'parameter' => array(
        'membership' => array(
          'type' => 'paypal_roles_memberships',
          'label' => t('Membership product'),
        ),
        'tax_amount' => array(
          'type' => 'decimal',
          'label' => t('Tax Amount'),
          'description' => t('If adding on the percentage of the price, please use a percentage figure (e.g. 25.42) without percentage(%) symbol.'),
          'sanitize' => TRUE,
        ),
        'calculation_method' => array(
          'restriction' => 'input',
          'type' => 'text',
          'label' => t('Calculation method'),
          'options list' => 'paypal_roles_rules_calculation_methods',
          'description' => t('Define the method of calculating tax on the membership price.'),
        ),
        'tax_name' => array(
          'type' => 'text',
          'label' => t('Tax Name'),
          'description' => t('The name of the taxation system.'),
        ),

      ),
      'module' => 'paypal_roles',
    ),
  );
}

/**
 * Implements hook_rules_condition_info().
 */
function paypal_roles_rules_rules_condition_info() {
  return array(
    'paypal_roles_rules_condition_base_price_comparator' => array(
      'label' => t('Compare base prices'),
      'parameter' => array(
        'membership' => array(
          'type' => 'paypal_roles_memberships',
          'label' => t('Membership Product'),
        ),
        'comparator' => array(
          'restriction' => 'input',
          'type' => 'text',
          'label' => t('Comparison Operator'),
          'options list' => 'paypal_roles_rules_comparators',
          'description' => t('Define the operator to check base price against a set limit'),
        ),
        'price' => array(
          'type' => 'decimal',
          'label' => t('Base Price Limit'),
        ),
      ),
      'group' => 'Paypal Roles',
    ),
  );
}

/**
 * Implements hook_rules_data_info().
 */
function paypal_roles_rules_rules_data_info() {
  $data_types = array(
    'paypal_roles_memberships' => array(
      'label' => t('Membership product'),
      'group' => t('Paypal Roles'),
      'wrap' => TRUE,
      'property info' => array(
        'machine_name' => array(
          'type' => 'text',
          'label' => t('Machine name'),
          'description' => t('Value of field %name.', array('%name' => 'machine_name')),
        ),
        'name' => array(
          'type' => 'text',
          'label' => t('Name'),
          'description' => t('Value of field %name.', array('%name' => 'name')),
        ),
        'description' => array(
          'type' => 'text',
          'label' => t('Description'),
          'description' => t('Value of field %name.', array('%name' => 'description')),
        ),
        'amount' => array(
          'type' => 'float',
          'label' => t('Amount'),
          'description' => t('Value of field %name.', array('%name' => 'amount')),
        ),
        'currency' => array(
          'type' => 'text',
          'label' => t('Currency'),
          'description' => t('Value of field %name.', array('%name' => 'currency')),
        ),
        'status' => array(
          'type' => 'int',
          'label' => t('Status'),
          'description' => t('Value of field %name. 0 means Inactive and 1 means Active.', array('%name' => 'status')),
        ),
        'button_type' => array(
          'type' => 'int',
          'label' => t('Button type'),
          'description' => t('Value of field %name. 0 means One-time purchase and 1 means Recurring payment.', array('%name' => 'button_type')),
        ),
      ),
    ),
  );

  return $data_types;
}

/**
 * Select list for Tax calculation options.
 */
function paypal_roles_rules_calculation_methods() {
  return array(
    'percentage' => 'Price + Percentage',
    'add' => 'Price + Fixed value',
  );
}

/**
 * Select list for comparators.
 */
function paypal_roles_rules_comparators() {
  return array(
    'eq' => '=',
    'gt' => '>',
    'lt' => '<',
    'gte' => '>=',
    'lte' => '<=',
  );
}

/**
 * Helper function to apply the specified comparator.
 */
function paypal_roles_rules_condition_base_price_comparator($membership, $comparator, $price) {
  switch ($comparator) {
    case 'eq':
      return $membership->amount == $price;
      break;

    case 'gt':
      return $membership->amount > $price;
      break;

    case 'lt':
      return $membership->amount < $price;
      break;

    case 'gte':
      return $membership->amount >= $price;
      break;

    case 'lte':
      return $membership->amount <= $price;
      break;
  }
}

/**
 * Implements hook_paypal_roles_payments_insert().
 */
function paypal_roles_rules_paypal_roles_payments_insert($payment) {
  $associated_user = user_load($payment->uid);

  // Trigger rules event.
  rules_invoke_event('paypal_roles_payment_insert', $payment, $associated_user);
}

/**
 * Implements hook_paypal_roles_custom_payments_insert().
 */
function paypal_roles_rules_paypal_roles_custom_payments_insert($payment) {
  $associated_user = user_load($payment->uid);

  // Trigger rules event.
  rules_invoke_event('paypal_roles_custom_payments_insert', $payment, $associated_user);
}

/**
 * Implements hook_paypal_roles_memberships_alter().
 */
function paypal_roles_rules_paypal_roles_memberships_alter($ml) {
  // When membership is loaded, modify the membership.
  rules_invoke_event('paypal_roles_memberships_alter', $ml);
}

/**
 * General calculator for tax. This is a helper action for site builders who
 * might not be savvy with calculation actions using Rules UI.
 */
function paypal_roles_rules_action_calculate_tax($membership, $tax_amount, $calculation_method, $tax_name) {
  $base_price = $membership->amount;

  if (!isset($membership->tax_applied)) {
    if ($calculation_method == "percentage") {
      $membership->tax_rate = $tax_amount;
      $membership->amount_with_tax = $base_price + $base_price * ($tax_amount / 100);
    }
    elseif ($calculation_method == "add") {
      $membership->tax_amount = $tax_amount;
      $membership->amount_with_tax = $base_price + $tax_amount;
    }

    // Apply tax marker to modified membership.
    $membership->tax_applied = $tax_name;
  }
}
