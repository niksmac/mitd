<?php

/**
 * @file
 * Hooks and callbacks for the paypal_roles module.
 */

/**
 * Implements hook_permission().
 */
function paypal_roles_permission() {
  return array(
    'administer paypal roles' => array(
      'title' => t('Administer PayPal Roles'),
      'description' => t('Allow the user administer PayPal Roles settings'),
    ),
    'view paypal roles payments' => array(
        'title' => t('View Own PayPal Roles Payments'),
        'description' => t('Allow the user to view own PayPal Roles payments'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function paypal_roles_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'paypal_roles') . '/includes/views',
  );
}

/**
 * Implements hook_menu().
 */
function paypal_roles_menu() {
  $items['admin/paypal-roles'] = array(
    'title' => 'PayPal Roles',
    'description' => 'Allows the user to configure the PayPal Roles module.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer paypal roles'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => 0,
  );

  $items['admin/paypal-roles/custom-payments'] = array(
    'title' => 'Custom Payments & Trial Periods',
    'description' => 'Create a custom subscription payment for granting access to a user manually.',
    'page callback' => 'paypal_roles_custom_payments_list',
    'access callback' => 'user_access',
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/paypal_roles.admin.inc',
    'weight' => 1,
  );

  $items['admin/paypal-roles/custom-payments/list'] = array(
    'title' => 'Custom Payments & Trial Periods',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/paypal-roles/custom-payments/create'] = array(
    'title' => 'Create Custom Payment',
    'description' => 'Create a custom subscription payment for granting access to a user manually.',
    'file' => 'includes/paypal_roles.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_roles_custom_payments_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/paypal-roles/custom-payments/manage/%paypal_roles_custom_payments'] = array(
    'title' => 'Edit Custom Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_roles_custom_payments_form', 4),
    'access arguments' => array('administer paypal roles'),
    'file' => 'includes/paypal_roles.admin.inc',
  );

  $items['admin/paypal-roles/custom-payments/manage/%paypal_roles_custom_payments/edit'] = array(
    'title' => 'Edit Custom Payment',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  $items['admin/paypal-roles/custom-payments/manage/%paypal_roles_custom_payments/delete'] = array(
    'title' => 'Delete Custom Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_roles_custom_payments_delete_form', 4),
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/paypal_roles.admin.inc',
  );

  $items['admin/paypal-roles/payments'] = array(
    'title' => 'PayPal Payments',
    'description' => 'List of PayPal (IPN) Payments.',
    'page callback' => 'paypal_roles_payments_list',
    'access callback' => 'user_access',
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/paypal_roles.admin.inc',
    'weight' => 2,
  );

  $items['admin/paypal-roles/payments/manage/%paypal_roles_payments/cancel'] = array(
    'title' => 'Cancel Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_roles_payments_cancel_form', 4),
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_NONE,
    'file' => 'includes/paypal_roles.admin.inc',
  );

  $items['admin/paypal-roles/payments/manage/%paypal_roles_payments/uncancel'] = array(
    'title' => 'Un-cancel Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_roles_payments_uncancel_form', 4),
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_NONE,
    'file' => 'includes/paypal_roles.admin.inc',
  );

  $items['admin/paypal-roles/memberships'] = array(
    'title' => 'Memberships',
    'description' => 'Manage Memberships.',
    'page callback' => 'paypal_roles_memberships_list',
    'access callback' => 'user_access',
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/paypal_roles.admin.inc',
    'weight' => 3,
  );

  $items['admin/paypal-roles/memberships/list'] = array(
    'title' => 'Membership Packages',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/paypal-roles/memberships/create'] = array(
    'title' => 'Create Membership',
    'description' => 'Create a Membership.',
    'file' => 'includes/paypal_roles.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_roles_memberships_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/paypal-roles/memberships/manage/%paypal_roles_memberships'] = array(
    'title' => 'Edit Membership',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_roles_memberships_form', 4),
    'access arguments' => array('administer paypal roles'),
    'file' => 'includes/paypal_roles.admin.inc',
  );

  $items['admin/paypal-roles/memberships/manage/%paypal_roles_memberships/edit'] = array(
    'title' => 'Edit Membership',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  $items['admin/paypal-roles/memberships/manage/%paypal_roles_memberships/delete'] = array(
    'title' => 'Delete Membership',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_roles_memberships_delete_form', 4),
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/paypal_roles.admin.inc',
  );

  $items['admin/paypal-roles/settings'] = array(
    'title' => 'Settings',
    'description' => 'Allows the user to configure the PayPal Roles settings',
    'file' => 'includes/paypal_roles.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_roles_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 4,
  );

  $items['admin/paypal-roles/settings/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/paypal-roles/settings/selection'] = array(
    'title' => 'Account selection',
    'description' => 'Allows the user to create their custom ordering, which allows to help selecting the Drupal account for payer.',
    'file' => 'includes/paypal_roles.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_roles_account_selection_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer paypal roles'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );

  $items['paypal-roles/ipn-listener'] = array(
    'page callback' => 'paypal_roles_ipn_listener_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/paypal_roles.menu.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function paypal_roles_theme() {
  return array(
    'paypal_roles_account_selection_form' => array(
      'render element' => 'form',
      'file' => 'paypal_roles.theme.inc',
      'path' => drupal_get_path('module', 'paypal_roles') . '/includes',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function paypal_roles_block_info() {
  $blocks = array();

  foreach (paypal_roles_memberships_load_multiple() as $ml_name => $ml) {
    $blocks[$ml_name]['info'] = $ml->name;
    $blocks[$ml_name]['cache'] = DRUPAL_NO_CACHE;
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function paypal_roles_block_view($delta = '') {
  $block = array();
  $ml = paypal_roles_memberships_load($delta);

  if ($ml) {
    $contextual_path = 'admin/structure/paypal-roles/memberships/manage/';

    $block['content'] = drupal_get_form('paypal_roles_block_form_' . $ml->machine_name);
    $block['content']['#contextual_links']['membership'] = array(
      $contextual_path,
      array($delta)
    );

    $name = check_plain($ml->name);
    $textgroup = implode(':', array(
      'paypal_roles',
      'memberships',
      'name',
      $ml->machine_name,
    ));

    $rewrited_name = paypal_roles_translate($textgroup, $name, 'plain_text');

    $block['subject'] = check_plain($rewrited_name);
  }

  return $block;
}

/**
 * Implements hook_forms().
 */
function paypal_roles_forms($form_id, $args) {
  $forms = array();

  foreach (paypal_roles_memberships_load_multiple() as $ml_name => $ml) {
    $formid = 'paypal_roles_block_form_' . $ml_name;

    if ($form_id == $formid) {
      $forms[$formid] = array(
        'callback' => 'paypal_roles_block_form',
        'callback arguments' => array($ml_name),
      );
    }
  }

  return $forms;
}

/**
 * Implements hook_form().
 */
function paypal_roles_block_form($form, &$form_state, $item) {
  $form = array();

  $ml = paypal_roles_memberships_load($item);

  $form['item'] = array(
    '#type' => 'hidden',
    '#value' => $item,
  );

  if (!empty($ml->description)) {
    $description = check_markup($ml->description, $ml->description_format);
    $textgroup = implode(':', array(
      'paypal_roles',
      'memberships',
      'description',
      $ml->machine_name,
    ));

    $rewrited_description = paypal_roles_translate($textgroup, $description, $ml->description_format);

    $form['desctext'] = array(
      '#type' => 'item',
      '#markup' => $rewrited_description,
    );
  }

  $amounttext = $ml->amount . ' ' . $ml->currency;

  // Append tax amount.
  if (isset($ml->tax_amount) && (float) $ml->tax_amount > 0) {
    $amounttext .= ' (+' . $ml->tax_amount . ' ' . $ml->currency . ' ' . $ml->tax_applied . ')';
  }

  // Append tax rate.
  if (isset($ml->tax_rate) && (float) $ml->tax_rate > 0) {
    $amounttext .= ' (+' . $ml->tax_rate . '% ' . $ml->tax_applied . ')';
  }

  // Append period.
  if ($ml->length > 0) {
    $type = paypal_roles_convert_length($ml->length_type, $ml->length);
    $amounttext .= ' / ' . $ml->length . ' ' . t($type);
  }

  $form['amounttext'] = array(
    '#type' => 'item',
    '#markup' => $amounttext,
  );

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('actions'),
    ),
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => (int) $ml->button_type > 0 ? t('Subscribe now!') : t('Buy now!'),
  );

  return $form;
}

/**
 * Submit function for block forms.
 *
 * @global object $user
 *  Logged in user details.
 *
 * @param array $form
 *
 * @param array $form_state
 *
 */
function paypal_roles_block_form_submit(&$form, &$form_state) {
  global $base_url, $base_path, $user;

  $ml = paypal_roles_memberships_load($form_state['values']['item']);

  $params = array();

  // If Subscription item...
  if ((int) $ml->button_type > 0) {
    // Specify a Subscribe button.
    $params['cmd'] = '_xclick-subscriptions';

    // Set the terms of the regular subscription.
    $params['currency_code'] = $ml->currency;
    $params['a3'] = $ml->amount;
    $params['p3'] = $ml->length;
    $params['t3'] = $ml->length_type;

    // If tax amount is applied, we need to override amount, because 'tax' and
    // 'tax_rate' variables are only supported by the Buy Now buttons.
    if (isset($ml->tax_amount) && (float) $ml->tax_amount > 0) {
      $params['a3'] = $ml->amount_with_tax;
    }

    // If tax rate is applied, we need to override amount, because 'tax' and
    // 'tax_rate' variables are only supported by the Buy Now buttons.
    if (isset($ml->tax_rate) && (float) $ml->tax_rate > 0) {
      $params['a3'] = $ml->amount_with_tax;
    }

    // Set recurring payments until canceled.
    $params['src'] = 1;

    // Set recurring payments to stop after x billing cycles.
    if ((int) $ml->cycles > 0) {
      $params['srt'] = (int) $ml->cycles;
    }

    // Set the terms of the 1st trial period.
    if (isset($ml->trial_length) && (int) $ml->trial_length > 0) {
      $params['a1'] = $ml->trial_amount;
      $params['p1'] = $ml->trial_length;
      $params['t1'] = $ml->trial_length_type;
    }
  }
  // If Buy Now item...
  else {
    // Specify a Subscribe button.
    $params['cmd'] = '_xclick';

    // If discount amount is set.
    if ($ml->discount_rate > 0) {
      // Specify the discount amount that apply to the order.
      // $params['discount_amount'] = 2.00;
      // If discoun rate is defined for a role.
      if ($ml->discount_role > 0) {
        // Load Discount Role by RID.
        $role = user_role_load($ml->discount_role);

        // If current user has the role.
        if (in_array($role->name, $user->roles)) {
          // Specify the discount percentage that apply to the item.
          $params['discount_rate'] = $ml->discount_rate;
        }
      }
      else {
        // Specify the discount percentage that apply to the item.
        $params['discount_rate'] = $ml->discount_rate;
      }
    }

    // Specify the original price.
    $params['currency_code'] = $ml->currency;
    $params['amount'] = $ml->amount;

    // Append tax amount.
    if (isset($ml->tax_amount) && (float) $ml->tax_amount > 0) {
      $params['tax'] = $ml->tax_amount;
    }

    // Append tax rate.
    if (isset($ml->tax_rate) && (float) $ml->tax_rate > 0) {
      $params['tax_rate'] = $ml->tax_rate;
    }
  }

  // Identify the subscription.
  $params['item_name'] = $ml->name;
  $params['item_number'] = $ml->machine_name;

  if (user_is_logged_in()) {
    $params['custom'] = $user->mail;
  }

  $return = $base_url . $base_path;
  $return_cancel = $base_url . $base_path;

  if (variable_get('paypal_roles_sandbox', 1) == "1") {
    $url = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    $params['business'] = variable_get('paypal_roles_s_email', '');

    $params['return'] = variable_get('paypal_roles_s_return', $return);
    $params['cancel_return'] = variable_get('paypal_roles_s_return_cancel', $return_cancel);
  }
  else {
    $url = 'https://www.paypal.com/cgi-bin/webscr';
    $params['business'] = variable_get('paypal_roles_l_email', '');

    $params['return'] = variable_get('paypal_roles_l_return', $return);
    $params['cancel_return'] = variable_get('paypal_roles_l_return_cancel', $return_cancel);
  }

  // Default IPN path.
  $params['notify_url'] = url('paypal-roles/ipn-listener', array('absolute' => TRUE));

  // The locale of the login or sign-up page.
  if (isset($ml->language) && $ml->language != 'N/A') {
    $params['lc'] = $ml->language;
  }

  $query = drupal_http_build_query($params);

  drupal_goto($url . '?' . $query);
  drupal_exit();
}

/**
 * Load the memberships data for a particular instance.
 */
function paypal_roles_memberships_load($name) {
  $mls = paypal_roles_memberships_load_multiple(array($name));

  foreach ($mls as $key => $ml) {
    $membership = &$mls[$key];
    // Provides hook_paypal_roles_memberships_alter().
    module_invoke_all('paypal_roles_memberships_alter', $membership);
  }

  return isset($mls[$name]) ? $mls[$name] : NULL;
}

/**
 * Load the memberships data.
 */
function paypal_roles_memberships_load_multiple($names = array()) {
  ctools_include('export');
  $defaults = empty($names) ? ctools_export_load_object('paypal_roles_memberships', 'all') : ctools_export_load_object('paypal_roles_memberships', 'names', $names);
  return $defaults;
}

/**
 * Creates a new membership instance.
 */
function paypal_roles_memberships_save($ml) {
  // Provides hook_paypal_roles_memberships_presave().
  module_invoke_all('paypal_roles_memberships_presave', $ml);

  $exists = paypal_roles_memberships_load($ml->machine_name);

  if ($exists && empty($exists->in_code_only)) {
    $ret = drupal_write_record('paypal_roles_memberships', $ml, 'machine_name');
    if ($ret == SAVED_UPDATED) {
      // Provides hook_paypal_roles_memberships_update().
      module_invoke_all('paypal_roles_memberships_update', $ml);
    }
    else {
      return FALSE;
    }
  }
  else {
    $ret = drupal_write_record('paypal_roles_memberships', $ml);
    if ($ret == SAVED_NEW) {
      // Provides hook_paypal_roles_memberships_insert().
      module_invoke_all('paypal_roles_memberships_insert', $ml);
    }
    else {
      return FALSE;
    }
  }

  return $ml;
}

/**
 * Updates an existing membership instance.
 */
function paypal_roles_memberships_update($ml) {
  paypal_roles_memberships_save($ml);
  return $ml;
}

/**
 * Exports the specified membership instance.
 */
function paypal_roles_memberships_export($ml, $indent = '') {
  $output = ctools_export_object('paypal_roles_memberships', $ml, $indent);
  return $output;
}

/**
 * Deletes a membership instance.
 */
function paypal_roles_memberships_delete($machine_name) {
  db_query('DELETE FROM {paypal_roles_memberships} WHERE machine_name = :machine_name', array(':machine_name' => $machine_name));
}

/**
 * Determine if the machine name is in use.
 */
function paypal_roles_memberships_machine_name_exists($machine_name) {
  $qt_exists = db_query_range('SELECT 1 FROM {paypal_roles_memberships} WHERE machine_name = :name', 0, 1, array(':name' => $machine_name))->fetchField();
  return $qt_exists;
}

/**
 * Load the payments data for a particular instance.
 */
function paypal_roles_payments_load($name) {
  $pms = paypal_roles_payments_load_multiple(array($name));
  return isset($pms[$name]) ? $pms[$name] : NULL;
}

/**
 * Load the payments data.
 */
function paypal_roles_payments_load_multiple($names = array()) {
  ctools_include('export');
  $defaults = empty($names) ? ctools_export_load_object('paypal_roles_payments', 'all') : ctools_export_load_object('paypal_roles_payments', 'names', $names);
  return $defaults;
}

/**
 * Load the payments data for a particular instance.
 */
function paypal_roles_payments_load_conditional($conditions = array()) {
  ctools_include('export');
  return ctools_export_load_object('paypal_roles_payments', 'conditions', $conditions);
}

/**
 * Creates a new payments instance.
 */
function paypal_roles_payments_save($pmt) {
  // Provides hook_paypal_roles_payments_presave().
  module_invoke_all('paypal_roles_payments_presave', $pmt);
  
  $exists = paypal_roles_payments_load($pmt->txn_id);
  if ($exists && empty($exists->in_code_only)) {
    $ret = drupal_write_record('paypal_roles_payments', $pmt, 'txn_id');
    if ($ret == SAVED_UPDATED) {
      // Provides hook_paypal_roles_payments_update().
      module_invoke_all('paypal_roles_payments_update', $pmt);
    }
    else {
      return FALSE;
    }
  }
  else {
    $ret = drupal_write_record('paypal_roles_payments', $pmt);
    if ($ret == SAVED_NEW) {
      // Provides hook_paypal_roles_payments_insert().
      module_invoke_all('paypal_roles_payments_insert', $pmt);
    }
    else {
      return FALSE;
    }
  }

  return $pmt;
}

/**
 * Updates an existing payments instance.
 */
function paypal_roles_payments_update($ipn) {
  paypal_roles_payments_save($ipn);
  return $ipn;
}

/**
 * Exports the specified payment instance.
 */
function paypal_roles_payments_export($pm, $indent = '') {
  $output = ctools_export_object('paypal_roles_payments', $pm, $indent);
  return $output;
}

/**
 * Load the custom payments data for a particular instance.
 */
function paypal_roles_custom_payments_load($pid) {
  $pms = paypal_roles_custom_payments_load_multiple(array($pid));
  return isset($pms[$pid]) ? $pms[$pid] : NULL;
}

/**
 * Load the custom payments data.
 */
function paypal_roles_custom_payments_load_multiple($pids = array()) {
  ctools_include('export');
  $defaults = empty($pids) ? ctools_export_load_object('paypal_roles_custom_payments', 'all') : ctools_export_load_object('paypal_roles_custom_payments', 'names', $pids);
  return $defaults;
}

/**
 * Load the custom payments data for a particular instance.
 */
function paypal_roles_custom_payments_load_conditional($conditions = array()) {
  ctools_include('export');
  return ctools_export_load_object('paypal_roles_custom_payments', 'conditions', $conditions);
}

/**
 * Creates a new custom payments instance.
 */
function paypal_roles_custom_payments_save($pmt) {
  // Provides hook_paypal_roles_custom_payments_presave().
  module_invoke_all('paypal_roles_custom_payments_presave', $pmt);

  $exists = paypal_roles_custom_payments_load($pmt->pid);

  if ($exists && empty($exists->in_code_only)) {
    $ret = drupal_write_record('paypal_roles_custom_payments', $pmt, 'pid');
    if ($ret == SAVED_UPDATED) {
      // Provides hook_paypal_roles_custom_payments_update().
      module_invoke_all('paypal_roles_custom_payments_update', $pmt);
    }
    else {
      return FALSE;
    }
  }
  else {
    $ret = drupal_write_record('paypal_roles_custom_payments', $pmt);
    if ($ret == SAVED_NEW) {
      // Provides hook_paypal_roles_custom_payments_insert().
      module_invoke_all('paypal_roles_custom_payments_insert', $pmt);
    }
    else {
      return FALSE;
    }
  }

  return $pmt;
}

/**
 * Updates an existing custom payments instance.
 */
function paypal_roles_custom_payments_update($payment) {
  paypal_roles_custom_payments_save($payment);
  return $payment;
}

/**
 * Exports the specified custom payment instance.
 */
function paypal_roles_custom_payments_export($pm, $indent = '') {
  $output = ctools_export_object('paypal_roles_custom_payments', $pm, $indent);
  return $output;
}

/**
 * Deletes the specified custom payment instance.
 */
function paypal_roles_custom_payments_delete($pmt) {
  db_query('DELETE FROM {paypal_roles_custom_payments} WHERE pid = :pid', array(':pid' => $pmt));
}

/**
 * Load the payer data for a particular instance.
 */
function paypal_roles_payer_load($name) {
  $pms = paypal_roles_payer_load_multiple(array($name));
  return isset($pms[$name]) ? $pms[$name] : NULL;
}

/**
 * Load the payer data.
 */
function paypal_roles_payer_load_multiple($names = array()) {
  ctools_include('export');
  $defaults = empty($names) ? ctools_export_load_object('paypal_roles_payer', 'all') : ctools_export_load_object('paypal_roles_payer', 'names', $names);
  return $defaults;
}

/**
 * Creates a new payer instance.
 */
function paypal_roles_payer_save($scr) {
  $exists = paypal_roles_payer_load($scr->payer_id);

  if ($exists && empty($exists->in_code_only)) {
    $ret = drupal_write_record('paypal_roles_payer', $scr, 'payer_id');
    if ($ret == SAVED_UPDATED) {

    }
    else {
      return FALSE;
    }
  }
  else {
    $ret = drupal_write_record('paypal_roles_payer', $scr);
    if ($ret == SAVED_NEW) {

    }
    else {
      return FALSE;
    }
  }

  return $scr;
}

/**
 * Exports the specified payer instance.
 */
function paypal_roles_payer_export($scr, $indent = '') {
  $output = ctools_export_object('paypal_roles_payer', $scr, $indent);
  return $output;
}

/**
 * Helper function to save PayPal IPN messages as a payment instance.
 *
 * @param mixed $user
 *  A fully-loaded $user object or FALSE.
 *
 * @return mixed
 *  A fully-loaded payment instance object or FALSE.
 */
function paypal_roles_save_ipn_message($user) {
  if (!$user) {
    $rawipn = $_POST;

    if (isset($_POST['first_name']) && isset($_POST['last_name'])) {
      $username = $_POST['first_name'] . ' ' . $_POST['last_name'];
    }
    else {
      $username = $_POST['payer_email'];
    }
    $username_unique = $username;

    if (user_load_by_name($username_unique)) {
      $index = 0;
      do {
        $index++;
        $username_unique = $username . ' ' . $index;
      } while (user_load_by_name($username_unique));
    }

    $user_data = array();
    $user_data['mail'] = $_POST['payer_email'];
    $user_data['name'] = $username_unique;

    // Create user account.
    $user = paypal_roles_create_user_account($user_data, $rawipn);
  }

  // Save (or update) uid and payer_id in the switchtable.
  if (isset($_POST['payer_id']) && isset($user->uid) && $user->uid > 0) {
    $scr = new stdClass();
    $scr->payer_id = $_POST['payer_id'];
    $scr->uid = $user->uid;

    paypal_roles_payer_save($scr);
  }

  if ($user) {
    $ipn = new stdClass();
    $ipn->txn_id = $_POST['txn_id'];
    $ipn->item_id = $_POST['item_number'];
    $ipn->created = time();
    $ipn->post = $_POST;
    $ipn->uid = $user->uid;
    $ipn->cancelled = 0;
    $ipn->item_name = $_POST['item_name'];
    $ipn->amount = $_POST['mc_gross'];
    $ipn->currency = $_POST['mc_currency'];

    if (paypal_roles_payments_save($ipn)) {
      return $ipn;
    }
  }

  return FALSE;
}

/**
 * Helper function to save PayPal IPN messages as a custom payment instance.
 *
 * @param mixed $user
 *  A fully-loaded $user object or FALSE.
 *
 * @return mixed
 *  A fully-loaded payment instance object or FALSE.
 */
function paypal_roles_save_ipn_message_trial($user) {
  if (!$user) {
    $rawipn = $_POST;

    if (isset($_POST['first_name']) && isset($_POST['last_name'])) {
      $username = $_POST['first_name'] . ' ' . $_POST['last_name'];
    }
    else {
      $username = $_POST['payer_email'];
    }
    $username_unique = $username;

    if (user_load_by_name($username_unique)) {
      $index = 0;
      do {
        $index++;
        $username_unique = $username . ' ' . $index;
      } while (user_load_by_name($username_unique));
    }

    $user_data = array();
    $user_data['mail'] = $_POST['payer_email'];
    $user_data['name'] = $username_unique;

    // Create user account.
    $user = paypal_roles_create_user_account($user_data, $rawipn);
  }

  // Save (or update) uid and payer_id in the switchtable.
  if (isset($_POST['payer_id']) && isset($user->uid) && $user->uid > 0) {
    $scr = new stdClass();
    $scr->payer_id = $_POST['payer_id'];
    $scr->uid = $user->uid;

    paypal_roles_payer_save($scr);
  }

  if ($user) {
    $ml = paypal_roles_memberships_load($_POST['item_number']);

    $ipn = new stdClass();
    $ipn->pid = NULL;
    $ipn->uid = $user->uid;
    $ipn->date = time();

    $ipn->role = $ml->role;
    $ipn->length = $ml->trial_length;
    $ipn->length_type = $ml->trial_length_type;
    $ipn->amount = $ml->trial_amount;
    $ipn->currency = $ml->currency;

    $ipn->item_id = $_POST['item_number'];

    if (paypal_roles_custom_payments_save($ipn)) {
      return $ipn;
    }
  }

  return FALSE;
}

/**
 * Helper function to create new user accounts.
 *
 * @param array $user_data
 *  Contains user account information.
 *
 * @param array $rawipn
 *  Posted Paypal IPN data, full $_POST array.
 */
function paypal_roles_create_user_account($user_data, $rawipn) {
  $user_exits = user_load_by_mail($user_data['mail']);
  if (!$user_exits) {
    $password = user_password();

    $new_user_data = array(
      'name' => $user_data['name'],
      'pass' => $password,
      'mail' => $user_data['mail'],
      'status' => 1,
      'init' => $user_data['mail'],
    );

    $account_data = $new_user_data;

    // Ability to modify new user data with
    // hook_paypal_roles_user_data_alter(&$new_user_data, $rawipn).
    drupal_alter('paypal_roles_user_data', $account_data, $rawipn);

    $account = user_save(NULL, $account_data);

    if ($account) {
      // Manually set the password so it appears in the e-mail.
      $account->password = $password;

      // Send the e-mail through the user module.
      _user_mail_notify('register_no_approval_required', $account);
    }
    else {
      watchdog('paypal_roles', t('User account could not be created. IPN message: ') . var_export($_POST, TRUE));
    }

    return $account;
  }
  else {
    return $user_exits;
  }

  return FALSE;
}

/**
 * Implements hook_cron().
 */
function paypal_roles_cron() {
  $interval = variable_get('paypal_roles_interval', 60 * 60);

  if (time() >= variable_get('paypal_roles_next_execution', 0)) {
    paypal_roles_manage_roles_by_users();
    watchdog('paypal_roles', 'paypal_roles ran');
    variable_set('paypal_roles_next_execution', time() + $interval);
  }
}

/**
 * Worker function to remove and add roles by payments at users, or a
 * specific user.
 *
 * @param int $uid
 *  ID of a specific user.
 */
function paypal_roles_manage_roles_by_users($uid = 'all') {
  if ((int) $uid > 0) {
    $payments = paypal_roles_get_payments_by_uid($uid);
    $custom_payments = paypal_roles_get_custom_payments_by_uid($uid);
    paypal_roles_manage_roles_by_payments($payments, $custom_payments, $uid);
  }
  else {
    $users = entity_load('user', FALSE);
    foreach ($users as $user) {
      $payments = paypal_roles_get_payments_by_uid($user->uid);
      $custom_payments = paypal_roles_get_custom_payments_by_uid($user->uid);
      paypal_roles_manage_roles_by_payments($payments, $custom_payments, $user->uid);
    }
  }
}

/**
 * Helper function to get all payments by a specific user.
 */
function paypal_roles_get_payments_by_uid($uid = 0) {
  ctools_include('export');
  return ctools_export_load_object('paypal_roles_payments', 'conditions', array('uid' => $uid));
}

/**
 * Helper function to get all custom payments by a specific user.
 */
function paypal_roles_get_custom_payments_by_uid($uid = 0) {
  ctools_include('export');
  return ctools_export_load_object('paypal_roles_custom_payments', 'conditions', array('uid' => $uid));
}

/**
 * Function to remove and add roles by payments at a specific user.
 *
 * @param array $payments
 *  Payments of the user.
 *
 * @param int $uid
 *  ID of a specific user.
 */
function paypal_roles_manage_roles_by_payments($payments = array(), $custom_payments = array(), $uid = 0) {
  if ((empty($payments) && empty($custom_payments)) || (int) $uid === 0) {
    return FALSE;
  }

  $grace_period = variable_get('paypal_roles_payment_grace_period', 86400);

  $roles = array();
  $active_roles = array();

  foreach ($payments as $payment) {
    $membership = paypal_roles_memberships_load($payment->item_id);

    if (!in_array($membership->role, $roles)) {
      $roles[] = $membership->role;
    }

    // If membership has no expiration time, set role to active.
    // And the payment is not cancelled.
    if ((int) $membership->length === 0 && (bool) $payment->cancelled === FALSE) {
      if (!in_array($membership->role, $active_roles)) {
        $active_roles[] = $membership->role;
      }
    }
    // If membership has expiration time, check payment time.
    else {
      $payment_created = $payment->created + (int) $grace_period;
      $payment_date = date("Y-m-d H:i:s", $payment_created);

      $type = paypal_roles_convert_length($membership->length_type, $membership->length);

      if ($type) {
        $expiration = strtotime($payment_date . " +" . $membership->length . " " . $type);

        // If expiration time is higher than "now", set role to active.
        // And the payment is not cancelled.
        if ($expiration >= time() && (bool) $payment->cancelled === FALSE) {
          if (!in_array($membership->role, $active_roles)) {
            $active_roles[] = $membership->role;
          }
        }
      }
    }
  }

  foreach ($custom_payments as $payment) {
    if (!in_array($payment->role, $roles)) {
      $roles[] = $payment->role;
    }

    // If custom payment has no expiration time, set role to active.
    if ((int) $payment->length === 0) {
      if (!in_array($payment->role, $active_roles)) {
        $active_roles[] = $payment->role;
      }
    }
    // If custom payment has expiration time, check payment time.
    else {
      $payment_created = $payment->date + (int) $grace_period;
      $payment_date = date("Y-m-d H:i:s", $payment_created);

      $type = paypal_roles_convert_length($payment->length_type, $payment->length);

      if ($type) {
        $expiration = strtotime($payment_date . " +" . $payment->length . " " . $type);

        // If expiration time is higher than "now", set role to active.
        if ($expiration >= time()) {
          if (!in_array($payment->role, $active_roles)) {
            $active_roles[] = $payment->role;
          }
        }
      }
    }
  }

  // Get inactive roles.
  $inactives = array_diff($roles, $active_roles);

  // Remove inactive roles.
  paypal_roles_remove_roles_from_account($inactives, $uid);

  // Add active roles.
  paypal_roles_add_roles_to_account($active_roles, $uid);
}

/**
 * Add roles to a specific user's account.
 *
 * @param array $roles
 *  Contains Role IDs.
 *
 * @param int $uid
 *  ID of user account.
 *
 * @return mixed
 *  A fully-loaded user account, or FALSE.
 */
function paypal_roles_add_roles_to_account($roles = array(), $uid = 0) {
  if (empty($roles) || (int) $uid === 0) {
    return FALSE;
  }

  $account = user_load($uid);
  $current_roles = array();

  foreach ($account->roles as $key => $value) {
    if (!in_array($key, $current_roles)) {
      $current_roles[] = $key;
    }
  }

  foreach ($roles as $role) {
    if (!in_array($role, $current_roles)) {
      $current_roles[] = $role;

      $role_details = user_role_load($role);
      $account->roles[$role] = $role_details->name;
    }
  }

  module_invoke_all('paypal_roles_add_roles_to_account_alter', $roles, $uid, $account);

  return user_save($account);
}

/**
 * Remove roles from a specific user's account.
 *
 * @param array $roles
 *  Contains Role IDs.
 *
 * @param int $uid
 *  ID of user account.
 *
 * @return mixed
 *  A fully-loaded user account, or FALSE.
 */
function paypal_roles_remove_roles_from_account($roles = array(), $uid = 0) {
  if (empty($roles) || (int) $uid === 0) {
    return FALSE;
  }

  $account = user_load($uid);
  $new_roles = array();

  foreach ($account->roles as $key => $value) {
    if (!in_array($key, $roles)) {
      $new_roles[$key] = $value;
    }
  }

  $account->roles = $new_roles;

  module_invoke_all('paypal_roles_add_roles_to_account_alter', $roles, $uid, $account);

  return user_save($account);
}

/**
 * Return with currencies supported by PayPal.
 *
 * @return array
 */
function paypal_roles_supported_currencies() {
  return array(
    'EUR' => t('EUR'),
    'USD' => t('USD'),
    'AUD' => t('AUD'),
    'CAD' => t('CAD'),
    'CZK' => t('CZK'),
    'DKK' => t('DKK'),
    'HKD' => t('HKD'),
    'HUF' => t('HUF'), // This currency does not support decimals.
    'ILS' => t('ILS'),
    'JPY' => t('JPY'), // This currency does not support decimals.
    'MXN' => t('MXN'),
    'NOK' => t('NOK'),
    'NZD' => t('NZD'),
    'PHP' => t('PHP'),
    'PLN' => t('PLN'),
    'GBP' => t('GBP'),
    'RUB' => t('RUB'),
    'SGD' => t('SGD'),
    'SEK' => t('SEK'),
    'CHF' => t('CHF'),
    'TWD' => t('TWD'), // This currency does not support decimals.
    'THB' => t('THB'),
  );
}

/**
 * Convert length codes to readable texts.
 */
function paypal_roles_convert_length($type, $length) {
  switch ($type) {
    case "D":
      $type = "day" . (((int) $length > 1) ? 's' : '');
      break;
    case "W":
      $type = "week" . (((int) $length > 1) ? 's' : '');
      break;
    case "M":
      $type = "month" . (((int) $length > 1) ? 's' : '');
      break;
    case "Y":
      $type = "year" . (((int) $length > 1) ? 's' : '');
      break;
    default:
      $type = FALSE;
      break;
  }

  return $type;
}

/**
 * Returns an array of all possible language codes.
 */
function paypal_roles_languages() {
  return array(
    'N/A' => t('Not specified'),
    t('By country') => array(
      'AU' => t('Australia'),
      'AT' => t('Austria'),
      'BE' => t('Belgium'),
      'BR' => t('Brazil'),
      'CA' => t('Canada'),
      'CN' => t('China'),
      'FR' => t('France'),
      'DE' => t('Germany'),
      'IT' => t('Italy'),
      'NL' => t('Netherlands'),
      'PL' => t('Poland'),
      'PT' => t('Portugal'),
      'RU' => t('Russia'),
      'ES' => t('Spain'),
      'CH' => t('Switzerland'),
      'GB' => t('United Kingdom'),
      'US' => t('United States'),
    ),
    t('By language') => array(
      'da_DK' => t('Danish (for Denmark only)'),
      'he_IL' => t('Hebrew (for all)'),
      'id_ID' => t('Indonesian (for Indonesia only)'),
      'jp_JP' => t('Japanese (for Japan only)'),
      'no_NO' => t('Norwegian (for Norway only)'),
      'pt_BR' => t('Brazilian Portuguese (for Portugal and Brazil only)'),
      'ru_RU' => t('Russian (for Lithuania, Latvia, and Ukraine only)'),
      'sv_SE' => t('Swedish (for Sweden only)'),
      'th_TH' => t('Thai (for Thailand only)'),
      'tr_TR' => t('Turkish (for Turkey only)'),
      'zh_CN' => t('Simplified Chinese (for China only)'),
      'zh_HK' => t('Traditional Chinese (for Hong Kong only)'),
      'zh_TW' => t('Traditional Chinese (for Taiwan only)'),
    ),
  );
}

/**
 * Translate user entered string.
 *
 * @param string $name
 * @param string $string
 * @param string $format
 * @return string
 */
function paypal_roles_translate($name, $string, $format) {
  return function_exists('i18n_string_translate') ? i18n_string_translate($name, $string, array(
    'langcode' => NULL,
    'format' => $format,
    'sanitize' => FALSE,
  )) : $string;
}

/**
 * Implements hook_i18n_string_info().
 */
function paypal_roles_i18n_string_info() {
  $groups['paypal_roles'] = array(
    'title' => t('PayPal Roles'),
    'description' => t('Custom strings.'),
    'format' => FALSE, // This group doesn't have strings with format
    'list' => FALSE, // This group cannot list all strings
    'refresh callback' => 'paypal_roles_i18n_string_refresh',
  );

  return $groups;
}

/**
 * Callback function to refresh translatable strings.
 */
function paypal_roles_i18n_string_refresh($group) {
  if ($group === 'paypal_roles') {
    paypal_roles_i18n_update_strings();
  }

  return TRUE;
}

/**
 * Worker function to refresh translatable strings.
 */
function paypal_roles_i18n_update_strings() {
  if (!function_exists('i18n_string_update')) {
    return;
  }

  foreach (paypal_roles_memberships_load_multiple() as $ml_name => $ml) {
    i18n_string_update("paypal_roles:memberships:name:$ml_name", $ml->name);
    i18n_string_update("paypal_roles:memberships:description:$ml_name", $ml->description);
  }
}
